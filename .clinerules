# clinerules

## 前提条件

### 重要

ユーザーはCline/Rooよりプログラミングが得意ですが、時短のためにCline/Rooにコーディングを依頼しています。
あなたはGitHubから学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方に関してのコーディングは私が実装するよりも速いでしょう。ユーザーに意図を説明しながらコードを書いてください。
反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

### 期待する回答

- 日本語での詳細な説明
- 実装コードは省略せず、完全な形で提供
- セキュリティのベストプラクティスに従った実装

## コーディングプラクティス

### 原則

1. **DRY（Don't Repeat Yourself）**
   - 同一・類似処理は関数・モジュール化することで再利用性を高める。

2. **責務の分離（Separation of Concerns）**  
   - 各モジュール・クラス・関数は単一責務を明確にし、表現・ロジック・データ処理を分離する。

3. **KISS（Keep It Simple, Stupid）**  
   - コードは可能な限りシンプルに保ち、過度な複雑化を避ける。

4. **分割統治（Divide and Conquer）**  
   - 大きな問題は小さな単位に分割し、テスト・保守性を向上させる。

5. **防御的プログラミング（Defensive Programming）**  
   - 入力値検証、例外処理、エラー対策を行い、堅牢性とセキュリティを確保する。

6. **YAGNI（You Aren't Gonna Need It）**  
   - 現在の要件に集中し、不要な将来予測による過剰実装を避ける。

7. **可読性とドキュメンテーション**  
   - 変数・関数・クラス名は英語で、役割が一目でわかるような命名を行う。  
   - コメントやREADMEでコードの意図・ロジックを日本語で明確に説明する。

8. **テスト駆動開発（TDD）とユニットテスト**  
   - 基本機能にはユニットテストを用意する。  
   - TDDを推奨し、要件定義→テスト→実装→リファクタリングのサイクルを確立する。

9. **バージョン管理とコードレビュー**  
   - Gitで変更履歴を管理し、プルリクエストを通じてコードレビューを行う。  
   - ファイルを変更したら、変更があったファイルごとにコミットを行い、履歴管理を明確化すること。

10. **SOLID原則の適用**  
    - SRP, OCP, LSP, ISP, DIPを考慮し、拡張性・保守性の高い設計を行う。

### 個別のルール

#### .md

- markdownファイルの編集時はmarkdownlintを使用してフォーマットを整える。
- htmlレンダリング結果を確認し、表示崩れが発生する場合はLint警告を許容する代わりに無効化設定を追加する。

#### その他

- 以下のファイルについて、変更によって記載内容を修正する必要がある場合は、指示が無い場合でも併せて修正する。
  - README.md
  - .gitignore
